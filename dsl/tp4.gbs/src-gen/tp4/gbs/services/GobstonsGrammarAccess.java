/*
* generated by Xtext
*/
package tp4.gbs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GobstonsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProcedureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcedureDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationsOperationParserRuleCall_5_0 = (RuleCall)cOperationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProcedureDeclaration:
		//	{ProcedureDeclaration} "procedure" "Main" "()" "{" operations+=Operation* "}";
		public ParserRule getRule() { return rule; }

		//{ProcedureDeclaration} "procedure" "Main" "()" "{" operations+=Operation* "}"
		public Group getGroup() { return cGroup; }

		//{ProcedureDeclaration}
		public Action getProcedureDeclarationAction_0() { return cProcedureDeclarationAction_0; }

		//"procedure"
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }

		//"Main"
		public Keyword getMainKeyword_2() { return cMainKeyword_2; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//operations+=Operation*
		public Assignment getOperationsAssignment_5() { return cOperationsAssignment_5; }

		//Operation
		public RuleCall getOperationsOperationParserRuleCall_5_0() { return cOperationsOperationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operation:
		//	Function | Conditional;
		public ParserRule getRule() { return rule; }

		//Function | Conditional
		public Alternatives getAlternatives() { return cAlternatives; }

		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoverParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPonerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHayBolitasParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Function:
		//	Mover | Poner | HayBolitas;
		public ParserRule getRule() { return rule; }

		//Mover | Poner | HayBolitas
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mover
		public RuleCall getMoverParserRuleCall_0() { return cMoverParserRuleCall_0; }

		//Poner
		public RuleCall getPonerParserRuleCall_1() { return cPonerParserRuleCall_1; }

		//HayBolitas
		public RuleCall getHayBolitasParserRuleCall_2() { return cHayBolitasParserRuleCall_2; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBoolExpresionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoolExpresionHayBolitasParserRuleCall_2_0 = (RuleCall)cBoolExpresionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTrueBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTrueBlockOperationParserRuleCall_5_0 = (RuleCall)cTrueBlockAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFalseBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFalseBlockOperationParserRuleCall_9_0 = (RuleCall)cFalseBlockAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Conditional:
		//	"if" "(" boolExpresion=HayBolitas ")" "{" trueBlock=Operation "}" "else" "{" falseBlock=Operation "}";
		public ParserRule getRule() { return rule; }

		//"if" "(" boolExpresion=HayBolitas ")" "{" trueBlock=Operation "}" "else" "{" falseBlock=Operation "}"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//boolExpresion=HayBolitas
		public Assignment getBoolExpresionAssignment_2() { return cBoolExpresionAssignment_2; }

		//HayBolitas
		public RuleCall getBoolExpresionHayBolitasParserRuleCall_2_0() { return cBoolExpresionHayBolitasParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//trueBlock=Operation
		public Assignment getTrueBlockAssignment_5() { return cTrueBlockAssignment_5; }

		//Operation
		public RuleCall getTrueBlockOperationParserRuleCall_5_0() { return cTrueBlockOperationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"else"
		public Keyword getElseKeyword_7() { return cElseKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//falseBlock=Operation
		public Assignment getFalseBlockAssignment_9() { return cFalseBlockAssignment_9; }

		//Operation
		public RuleCall getFalseBlockOperationParserRuleCall_9_0() { return cFalseBlockOperationParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class HayBolitasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HayBolitas");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHayBolitasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamColorParserRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HayBolitas:
		//	"hayBolitas" "(" param=Color ")";
		public ParserRule getRule() { return rule; }

		//"hayBolitas" "(" param=Color ")"
		public Group getGroup() { return cGroup; }

		//"hayBolitas"
		public Keyword getHayBolitasKeyword_0() { return cHayBolitasKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//param=Color
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }

		//Color
		public RuleCall getParamColorParserRuleCall_2_0() { return cParamColorParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MoverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mover");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamDireccionParserRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Mover:
		//	"Mover" "(" param=Direccion ")";
		public ParserRule getRule() { return rule; }

		//"Mover" "(" param=Direccion ")"
		public Group getGroup() { return cGroup; }

		//"Mover"
		public Keyword getMoverKeyword_0() { return cMoverKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//param=Direccion
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }

		//Direccion
		public RuleCall getParamDireccionParserRuleCall_2_0() { return cParamDireccionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PonerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Poner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPonerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamColorParserRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Poner:
		//	"Poner" "(" param=Color ")";
		public ParserRule getRule() { return rule; }

		//"Poner" "(" param=Color ")"
		public Group getGroup() { return cGroup; }

		//"Poner"
		public Keyword getPonerKeyword_0() { return cPonerKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//param=Color
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }

		//Color
		public RuleCall getParamColorParserRuleCall_2_0() { return cParamColorParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DireccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Direccion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNorteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSurKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEsteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOesteKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Direccion:
		//	"Norte" | "Sur" | "Este" | "Oeste";
		public ParserRule getRule() { return rule; }

		//"Norte" | "Sur" | "Este" | "Oeste"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Norte"
		public Keyword getNorteKeyword_0() { return cNorteKeyword_0; }

		//"Sur"
		public Keyword getSurKeyword_1() { return cSurKeyword_1; }

		//"Este"
		public Keyword getEsteKeyword_2() { return cEsteKeyword_2; }

		//"Oeste"
		public Keyword getOesteKeyword_3() { return cOesteKeyword_3; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRojoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerdeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAzulKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNegroKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Color:
		//	"Rojo" | "Verde" | "Azul" | "Negro";
		public ParserRule getRule() { return rule; }

		//"Rojo" | "Verde" | "Azul" | "Negro"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Rojo"
		public Keyword getRojoKeyword_0() { return cRojoKeyword_0; }

		//"Verde"
		public Keyword getVerdeKeyword_1() { return cVerdeKeyword_1; }

		//"Azul"
		public Keyword getAzulKeyword_2() { return cAzulKeyword_2; }

		//"Negro"
		public Keyword getNegroKeyword_3() { return cNegroKeyword_3; }
	}
	
	
	private ProcedureDeclarationElements pProcedureDeclaration;
	private OperationElements pOperation;
	private FunctionElements pFunction;
	private ConditionalElements pConditional;
	private HayBolitasElements pHayBolitas;
	private MoverElements pMover;
	private PonerElements pPoner;
	private DireccionElements pDireccion;
	private ColorElements pColor;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GobstonsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tp4.gbs.Gobstons".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ProcedureDeclaration:
	//	{ProcedureDeclaration} "procedure" "Main" "()" "{" operations+=Operation* "}";
	public ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return (pProcedureDeclaration != null) ? pProcedureDeclaration : (pProcedureDeclaration = new ProcedureDeclarationElements());
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}

	//Operation:
	//	Function | Conditional;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Function:
	//	Mover | Poner | HayBolitas;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Conditional:
	//	"if" "(" boolExpresion=HayBolitas ")" "{" trueBlock=Operation "}" "else" "{" falseBlock=Operation "}";
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//HayBolitas:
	//	"hayBolitas" "(" param=Color ")";
	public HayBolitasElements getHayBolitasAccess() {
		return (pHayBolitas != null) ? pHayBolitas : (pHayBolitas = new HayBolitasElements());
	}
	
	public ParserRule getHayBolitasRule() {
		return getHayBolitasAccess().getRule();
	}

	//Mover:
	//	"Mover" "(" param=Direccion ")";
	public MoverElements getMoverAccess() {
		return (pMover != null) ? pMover : (pMover = new MoverElements());
	}
	
	public ParserRule getMoverRule() {
		return getMoverAccess().getRule();
	}

	//Poner:
	//	"Poner" "(" param=Color ")";
	public PonerElements getPonerAccess() {
		return (pPoner != null) ? pPoner : (pPoner = new PonerElements());
	}
	
	public ParserRule getPonerRule() {
		return getPonerAccess().getRule();
	}

	//Direccion:
	//	"Norte" | "Sur" | "Este" | "Oeste";
	public DireccionElements getDireccionAccess() {
		return (pDireccion != null) ? pDireccion : (pDireccion = new DireccionElements());
	}
	
	public ParserRule getDireccionRule() {
		return getDireccionAccess().getRule();
	}

	//Color:
	//	"Rojo" | "Verde" | "Azul" | "Negro";
	public ColorElements getColorAccess() {
		return (pColor != null) ? pColor : (pColor = new ColorElements());
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
